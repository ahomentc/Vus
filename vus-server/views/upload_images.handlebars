<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"><{{!}}/script>

<div style="margin: 10px;padding:20px;">
    <div class="enclose">
        <h5><label>Submit Your VR Environment</label></h5>
        <form id="uploadImagesForm" action="/uploadImages" enctype="multipart/form-data" method="POST">
            <div class="form-group custom-file file-upload">
                <input name="new_images" type="file" webkitdirectory multiple class="custom-file-input" id="customFile" />  
                <label class="custom-file-label" for="customFile">Choose a Folder</label>
            </div>
            <div class="form-group">
                <label>Name:</label>
                <input id="folderNameInput" type="text" class="form-control" name="folderName" pattern="[A-Za-z][-A-Za-z0-9_:.]*" placeholder="Enter Name" required/>
            </div>
            <div class="form-group">
                <label>Description:</label>
                <input id="envDescription" type="text" class="form-control" name="description" 
                    placeholder="Enter Description" required/>
            </div>
            <div class="form-group" style="visibility: hidden;">
                <input id="labels" type="text" class="form-control" name="labels" />
            </div>
            <button type="submit" class="btn btn-primary">Submit for Review</button>
        </form>
    </div>
    <div id="set_menu" class="set_menu" style="visibility: hidden;">
    </div>
</div>
<script>
    // update input placeholder value
    $('#customFile').on('change', (event) => {
        const folderName = event.target.files[0].webkitRelativePath.split("/")[0];
        // replace the "Choose a file" label
        $('.custom-file-label').html(folderName);

        // update folder name field
        document.getElementById("folderNameInput").value = folderName;

    });

    // add to some sort of element in form like this: id:label, id:label etc
    // then when form is submitted it is sent to server under the form
    // from there, we read it, create a file in the server (temporarily), and add file to s3
    // OR, we can just store it in the database as a json file since its super fast to load and cheap to store. Also easier.

    // create an input field, constantly modify the string

    var labels = {};

    function readAndPreview(file) {
        if(file.name.substring(0,2) == "._"){
            return;
        }

        var reader = new FileReader();

        reader.addEventListener("load", function () {
            var test = document.createElement("img");
            test.setAttribute("src", this.result)
            test.setAttribute("width", 400)
            test.setAttribute("height", 200)
            test.setAttribute("margin", 10)

            test.setAttribute("id",file.name)

            document.getElementsByClassName("set_menu")[0].appendChild(test);

            test.addEventListener('click', function (e) {
                var id = e.target.id.toString();
                var label = prompt("Please enter the room name for: " + id, "Ex: Kitchen");
                labels[id] = label
                new_labels = JSON.stringify(labels);
                document.getElementById("labels").value = new_labels;
            });
        }, false);
        reader.readAsDataURL(file);
    }

    function swap(A, x, y) {
        var temp = A[x];
        A[x] = A[y];
        A[y] = temp;
    }

    // use a simple selection sort
    function sortFiles(files){
        var len = files.length;
        for (var i = 0; i < len - 1; i = i + 1) {
            var j_min = i;
            for (var j = i + 1; j < len; j = j + 1) {
                // remove the extension
                if (files[j].name.split("").reverse().join("").substring(4,).split("").reverse().join("") < files[j_min].name.split("").reverse().join("").substring(4,).split("").reverse().join("")) {
                    if(files[j].name.substring(0,2) != "._"){
                        console.log(files[j_min].name.split("").reverse().join("").substring(4,).split("").reverse().join(""))
                        j_min = j;
                    } 
                } else {}
            }
            if (j_min !== i) {
                if(files[j_min].name.substring(0,2) != "._"){
                    swap(files, i, j_min);
                }
            } else {}
        }
        return files
    }

    
    $("#customFile").change(function(){
        var sorted_files = sortFiles(this.files);
        // [].forEach.call(this.files, readAndPreview);
        [].forEach.call(sorted_files, readAndPreview);


        document.getElementsByClassName("set_menu")[0].setAttribute("style", "visibility", true)
    });    

</script>
<style>
    .file-upload{
        margin-bottom: 15px;
    }

    body {
        background-color:#6b6b6b;
    }

    .enclose{
        border-radius:10px;
        display: flex;
        flex-wrap: wrap;
        width: 300px;
        margin:0 auto;
        margin-top: 40px;
        border: 1px solid #cbcbcb;
        padding: 20px;
        background-color:white;
    }  

    .set_menu{
        border-radius:10px;
        display: flex;
        flex-wrap: wrap;
        width: 90%;
        margin:0 auto;
        margin-top: 40px;
        border: 1px solid #cbcbcb;
        padding: 20px;
        background-color:white;
    }  
</style>